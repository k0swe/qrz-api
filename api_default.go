/*
QRZ XML Logbook Data Specification

This document describes the interface specification for access to QRZ's XML subscription data service. This service provides real-time access to information from the QRZ.COM servers and databases. Access to this service requires user authentication through the use of a valid QRZ.COM username and password. While any QRZ user may login to the service, an active QRZ Logbook Data subscription is required to access most of its features. Non-subscriber access limits the data fields that are returned and is primarily intended for testing and troubleshooting purposes only. A description of subscription plans and rates is available on the [QRZ website](http://www.qrz.com/i/subscriptions.html).

API version: 1.34
Contact: va7stv@qrz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qrz

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiRootGetRequest struct {
	ctx        context.Context
	ApiService *DefaultAPIService
	username   *string
	password   *string
	agent      *string
	s          *string
	callsign   *string
	dxcc       *GetDxccParameter
}

func (r ApiRootGetRequest) Username(username string) ApiRootGetRequest {
	r.username = &username
	return r
}

func (r ApiRootGetRequest) Password(password string) ApiRootGetRequest {
	r.password = &password
	return r
}

func (r ApiRootGetRequest) Agent(agent string) ApiRootGetRequest {
	r.agent = &agent
	return r
}

// session token
func (r ApiRootGetRequest) S(s string) ApiRootGetRequest {
	r.s = &s
	return r
}

// perform a callsign info lookup
func (r ApiRootGetRequest) Callsign(callsign string) ApiRootGetRequest {
	r.callsign = &callsign
	return r
}

// perform a DXCC info lookup
func (r ApiRootGetRequest) Dxcc(dxcc GetDxccParameter) ApiRootGetRequest {
	r.dxcc = &dxcc
	return r
}

func (r ApiRootGetRequest) Execute() (*QRZDatabase, *http.Response, error) {
	return r.ApiService.RootGetExecute(r)
}

/*
RootGet The do-everything endpoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRootGetRequest
*/
func (a *DefaultAPIService) RootGet(ctx context.Context) ApiRootGetRequest {
	return ApiRootGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return QRZDatabase
func (a *DefaultAPIService) RootGetExecute(r ApiRootGetRequest) (*QRZDatabase, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *QRZDatabase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.RootGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.username != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username", r.username, "form", "")
	}
	if r.password != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password", r.password, "form", "")
	}
	if r.agent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "agent", r.agent, "form", "")
	}
	if r.s != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "s", r.s, "form", "")
	}
	if r.callsign != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "callsign", r.callsign, "form", "")
	}
	if r.dxcc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dxcc", r.dxcc, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
