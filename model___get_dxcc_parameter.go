/*
QRZ XML Logbook Data Specification

This document describes the interface specification for access to QRZ's XML subscription data service. This service provides real-time access to information from the QRZ.COM servers and databases. Access to this service requires user authentication through the use of a valid QRZ.COM username and password. While any QRZ user may login to the service, an active QRZ Logbook Data subscription is required to access most of its features. Non-subscriber access limits the data fields that are returned and is primarily intended for testing and troubleshooting purposes only. A description of subscription plans and rates is available on the [QRZ website](http://www.qrz.com/i/subscriptions.html).

API version: 1.34
Contact: va7stv@qrz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qrz

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetDxccParameter - struct for GetDxccParameter
type GetDxccParameter struct {
	Float32 *float32
	String  *string
}

// float32AsGetDxccParameter is a convenience function that returns float32 wrapped in GetDxccParameter
func Float32AsGetDxccParameter(v *float32) GetDxccParameter {
	return GetDxccParameter{
		Float32: v,
	}
}

// stringAsGetDxccParameter is a convenience function that returns string wrapped in GetDxccParameter
func StringAsGetDxccParameter(v *string) GetDxccParameter {
	return GetDxccParameter{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetDxccParameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			if err = validator.Validate(dst.Float32); err != nil {
				dst.Float32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Float32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetDxccParameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetDxccParameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetDxccParameter) MarshalJSON() ([]byte, error) {
	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetDxccParameter) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableGetDxccParameter struct {
	value *GetDxccParameter
	isSet bool
}

func (v NullableGetDxccParameter) Get() *GetDxccParameter {
	return v.value
}

func (v *NullableGetDxccParameter) Set(val *GetDxccParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDxccParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDxccParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDxccParameter(val *GetDxccParameter) *NullableGetDxccParameter {
	return &NullableGetDxccParameter{value: val, isSet: true}
}

func (v NullableGetDxccParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDxccParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
